// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id          String       @id @default(uuid()) @db.Uuid
  email       String       @unique
  password    String       @db.VarChar(32)
  firstName   String       @map("first_name") @db.VarChar(64)
  lastName    String       @map("last_name") @db.VarChar(64)
  paymentInfo PaymentInfo?
  cards       Card[]
  apps        App[]
  lastLogin   DateTime     @default(now()) @map("last_login")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")

  @@map("customers")
}

model PaymentInfo {
  id         String   @id @default(uuid()) @db.Uuid
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String   @unique @map("customer_id") @db.Uuid
  card       Card     @relation(fields: [cardId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  cardId     String   @map("card_id") @db.Uuid
  amount     Int
  dueDate    DateTime @map("due_date")
  active     Boolean  @default(true)
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("payment_informations")
}

model Card {
  id              String        @id @default(uuid()) @db.Uuid
  customers       Customer[]
  paymentInfos    PaymentInfo[]
  cardNumber      String        @map("card_number") @db.VarChar(20)
  expirationYear  Int           @map("expiration_year")
  expirationMonth Int           @map("expiration_month")
  cvc             String        @db.VarChar(4)
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @default(now()) @updatedAt @map("updated_at")

  @@map("cards")
}

model App {
  id         Int      @id @default(autoincrement())
  secret     String   @unique @default(cuid())
  users      User[]
  roles      String[]
  customer   Customer @relation(fields: [customerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  customerId String   @map("customer_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("apps")
}

model User {
  id        String        @id @default(uuid()) @db.Uuid
  app       App           @relation(fields: [appId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  appId     Int           @map("app_id")
  provider  String
  authKey   String?       @map("auth_key")
  roles     Role[]        @relation(name: "user_roles")
  history   UserHistory[]
  lastLogin DateTime      @default(now()) @map("last_login")
  active    Boolean       @default(true)
  deletedAt DateTime?     @map("deleted_at")
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at")

  @@map("users")
}

model Role {
  id        Int      @id @default(autoincrement())
  role      String   @unique @db.VarChar(20)
  users     User[]   @relation(name: "user_roles")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("roles")
}

model UserHistory {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String   @db.Uuid
  type      LogType  @relation(fields: [typeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  typeId    Int
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("user_history")
}

model LogType {
  id        Int           @id @default(autoincrement())
  type      String        @unique @db.VarChar(36)
  history   UserHistory[]
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @default(now()) @updatedAt @map("updated_at")

  @@map("log_types")
}
